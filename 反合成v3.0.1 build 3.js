/* 简要介绍：
 * 逆向合成JS by @ybfsb2000s Version:3.0.3
 *
 * 更新内容：
 * 			1.添加了对因式分解（factor.js）的支持
 * 			2.修复了附魔金苹果无法反合成的bug
 * 			3.修复了启动器v1.11.3报错的问题
 * 做了改动的内容：
 * 			白色羊毛分解后不再出现骨粉（到时候吃亏了别赖我）
 * 本JS遵循 General Public License(GPL) v3 开源规则，可以任意复制或分发，也可以修改，具体请百度
 * 因为个人的学业原因，此mod的插件版本目前暂时停止开发（不是永久停止（但也说不定））
 * 最后更新的日期：2016-01-23
*/

var isFirstTime = ModPE.readData("ift");// 检测是否第一次使用此js
var hasFactor = ModPE.readData("hsf");// 检测是否安装了factor.js
var enable = true;// 是否启用
var bid;// 反合成方块id

function newLevel()//在加载地图后显示作者信息，不想要的话可以删掉
{
    clientMessage("反合成");
    clientMessage("版本v3.0.1");
    clientMessage("作者："+ChatColor.BLUE+"@ybfsb2000s");

}

//合成方式
/*
   *    合成方式使用是三维数组存储，数组hc[id][data]存储的是ID为id，特殊数据为data的物品的合成方式
   *    hc[id][data][0]存储的是反合成一个物品所需要的最少的数量
   *    hc[id][data][1]~hc[id][data][18]存储的分别是九宫格上每个格子中的物品，奇数位存储的是id，偶数位存储的是data
*/
// 下面的合成方式大致按照物品ID从小到大的顺序排列
// 非拓展合成方式开始
var hc=new Array();
for(var i=0;i<=512;i++)//初始化
    hc[i] = [[1,i,0]];
hc[1]=[[1,4,0,51,0],[1,1,3,406,0],[4,1,1,1,1,0,0,1,1,1,1],[2,4,0,406,0,0,0,4,0,406,0],[4,1,3,1,3,0,0,1,3],[2,1,3,4,0],[4,1,5,1,5,0,0,1,5,1,5]];
hc[5]=[[4,17,0],[4,17,1],[4,17,2], [4,17,3],[4,162,0],[4,162,1]];
for(var i=0;i<=15;i++)
{
    hc[17][i]=[1,17,i];
    hc[35][i]=[1,287,0,287,0,351,15-i,287,0,287,0];
    hc[99][i]=[1,99,i];
    hc[100][i]=[1,100,i];
    hc[159][i]=[8,159,0,159,0,159,0,159,0,351,15-i,159,0,159,0,159,0,159,0];
    hc[162][i]=[1,162,i];
    hc[171][i]=[3,35,i,35,i];
    hc[351][i]=[1,351,i];
}
for(var i=0;i<=5;i++)
{
    hc[157][i]=[1,157,i];
    hc[158][i]=[6,5,i,5,i,5,i,5,i,5,i,5,i];
    hc[175][i]=[1,175,i];
}
hc[18]=[[1,18,0],[1,18,1],[1,18,2],[1,18,3]];
hc[20]=[[1,12,0,51,0]];
hc[24]=[[1,12,0,12,0,0,0,12,0,12,0],[1,44,1,0,0,0,0,44,1],[4,24,0,24,0,0,0,24,0,24,0]];
hc[25]=[[1,5,0,5,0,5,0,5,0,331,0,5,0,5,0,5,0,5,0]];
hc[27]=[[6,266,0,0,0,266,0,266,0,280,0,266,0,266,0,331,0,266,0]];
hc[28]=[[6,265,0,0,0,265,0,265,0,70,0,265,0,265,0,331,0,265,0]];
hc[31]=[[1,31,0],[1,31,1],[1,31,2],[1,31,3]];
for(var i=0;i<=8;i++) hc[38][i]=[1,38,i];
for(var i=0;i<=6;i++) hc[43][i]=[1,43,i];
hc[44]=[[6,1,0,1,0,1,0],[6,24,0,24,0,24,0],[1,44,2],[6,4,0,4,0,4,0],[6,45,0,45,0,45,0],[6,98,0,98,0,98,0],[6,155,0,155,0,155,0]];
hc[45]=[[336,0,336,0,0,0,336,0,336,0]];
hc[46]=[[1,289,0,12,0,289,0,12,0,289,0,12,0,289,0,12,0,289,0]];
hc[47]=[[1,5,0,5,0,5,0,340,0,340,0,340,0,5,0,5,0,5,0]];
hc[48]=[[1,4,0,106,0]];
hc[50]=[[4,0,0,263,0,0,0,0,0,280,0]];
hc[53]=[[4,5,0,0,0,0,0,5,0,5,0,0,0,5,0,5,0,5,0]];
hc[54]=[[1,5,0,5,0,5,0,5,0,0,0,5,0,5,0,5,0,5,0]];
hc[58]=[[1,5,0,5,0,0,0,5,0,5,0]];
hc[61]=[[1,4,0,4,0,4,0,4,0,0,0,4,0,4,0,4,0,4,0]];
hc[65]=[[12,280,0,0,0,280,0,280,0,280,0,280,0,280,0,0,0,280,0]];
hc[66]=[[16,265,0,0,0,265,0,265,0,280,0,265,0,265,0,0,0,265,0]];
hc[67]=[[4,4,0,0,0,0,0,4,0,4,0,0,0,4,0,4,0,4,0]];
hc[69]=[[1,0,0,280,0,0,0,0,0,4,0]];
hc[70]=[[1,0,0,0,0,0,0,1,0,1,0]];
hc[72]=[[1,0,0,0,0,0,0,5,0,5,0]];
for(var i = 0; i <= 5; i ++) hc[77][i]=[1,0,0,0,0,0,0,0,0,1,0];
hc[75]=[[1,0,0,331,0,0,0,0,0,280,0]];
hc[85]=[[2,280,0,280,0,280,0,280,0,280,0,280,0]];
hc[89]=[[1,348,0,348,0,0,0,348,0,348,0]];
hc[91]=[[1,0,0,86,0,0,0,0,0,50,0]];
hc[96]=[[2,5,0,5,0,5,0,5,0,5,0,5,0]];
hc[97]=[[1,97,0],[1,97,1],[1,97,2],[1,97,3],[1,97,4],[1,97,5]];
hc[98]=[[4,1,0,1,0,0,0,1,0,1,0],[1,98,1],[1,98,2],[1,98,3],[1,98,4]];
hc[101]=[[16,265,0,265,0,265,0,265,0,265,0,265,0]];
hc[102]=[[16,20,0,20,0,20,0,20,0,20,0,20,0]];
hc[103]=[[1,360,0,360,0,360,0,360,0,360,0,360,0,360,0,360,0,360,0]];
hc[107]=[[1,280,0,5,0,280,0,280,0,5,0,280,0]];
hc[108]=[[4,45,0,0,0,0,0,45,0,45,0,0,0,45,0,45,0,45,0]];
hc[109]=[[4,98,0,0,0,0,0,98,0,98,0,0,0,98,0,98,0,98,0]];
hc[112]=[[1,405,0,405,0,0,0,405,0,405,0]];
hc[114]=[[4,112,0,0,0,0,0,112,0,112,0,0,0,112,0,112,0,112,0]];
hc[116]=[[1,0,0,340,0,0,0,264,0,49,0,264,0,49,0,49,0,49,0]];
hc[117]=[[1,0,0,369,0,0,0,4,0,4,0,4,0]];
hc[120]=[[1,120,0],[],[],[],[1,120,4]];
hc[123]=[[1,0,0,331,0,0,0,331,0,89,0,331,0,0,0,331,0]];
hc[126]=[[6,265,0,280,0,265,0,265,0,76,0,265,0,265,0,280,0,265,0]];
hc[128]=[[4,24,0,0,0,0,0,24,0,24,0,0,0,24,0,24,0,24,0]];
hc[131]=[[2,0,0,265,0,0,0,0,0,280,0,0,0,0,0,5,0]];
hc[134]=[[4,5,1,0,0,0,0,5,1,5,1,0,0,5,1,5,1,5,1]];
hc[135]=[[4,5,2,0,0,0,0,5,2,5,2,0,0,5,2,5,2,5,2]];
hc[136]=[[4,5,3,0,0,0,0,5,3,5,3,0,0,5,3,5,3,5,3]];
hc[139]=[[6,4,0,4,0,4,0,4,0,4,0,4,0],[6,48,0,48,0,48,0,48,0,48,0,48,0]];
for(var i = 0; i <= 5; i ++) hc[143][i]=[1,0,0,0,0,0,0,0,0,5,0];
hc[145]=[[1,42,0,42,0,42,0,0,0,265,0,0,0,265,0,265,0,265,0]];
hc[147]=[[1,0,0,0,0,0,0,266,0,266,0]];
hc[148]=[[1,0,0,0,0,0,0,265,0,265,0]];
hc[151]=[[1,20,0,20,0,20,0,406,0,406,0,406,0,158,0,158,0,158,0]];
hc[155]=[[1,406,0,406,0,0,0,406,0,406,0],[1,44,6,0,0,0,0,44,6],[1,155,0,0,0,0,0,155,0]];
hc[161]=[[1,161,0],[1,161,1],[1,161,2],[1,161,3]];
hc[163]=[[4,5,4,0,0,0,0,5,4,5,4,0,0,5,4,5,4,5,4]];
hc[164]=[[4,5,5,0,0,0,0,5,5,5,5,0,0,5,5,5,5,5,5]];
hc[167]=[[1,265,0,265,0,0,0,265,0,265,0]];
hc[183]=[[1,280,0,5,1,280,0,280,0,5,1,280,0]];
hc[184]=[[1,280,0,5,2,280,0,280,0,5,2,280,0]];
hc[185]=[[1,280,0,5,3,280,0,280,0,5,3,280,0]];
hc[186]=[[1,280,0,5,5,280,0,280,0,5,5,280,0]];
hc[187]=[[1,280,0,5,4,280,0,280,0,5,4,280,0]];
hc[245]=[[1,4,0,4,0,0,0,4,0,4,0]];
hc[247]=[[1,265,0,264,0,265,0,265,0,264,0,265,0,265,0,264,0,265,0],[1,247,1],[1,247,2]];
hc[256]=[[1,0,0,265,0,0,0,0,0,280,0,0,0,0,0,280,0,0,0]];
hc[257]=[[1,265,0,265,0,265,0,0,0,280,0,0,0,0,0,280,0]];
hc[258]=[[1,265,0,265,0,0,0,265,0,280,0,0,0,0,0,280,0]];
hc[259]=[[1,265,0,0,0,0,0,0,0,318,0]];
hc[261]=[[1,0,0,280,0,287,0,280,0,0,0,287,0,0,0,280,0,287,0]];
hc[262]=[[4,0,0,318,0,0,0,0,0,280,0,0,0,0,0,288,0]];
hc[263][1]=[1,17,0,51,0];
hc[267]=[[1,0,0,265,0,0,0,0,0,265,0,0,0,0,0,280,0]];
hc[268]=[[1,0,0,5,0,0,0,0,0,5,0,0,0,0,0,280,0]];
hc[269]=[[1,0,0,5,0,0,0,0,0,280,0,0,0,0,280,0]];
hc[270]=[[1,5,0,5,0,5,0,0,0,280,0,0,0,0,0,280,0]];
hc[271]=[[1,5,0,5,0,0,0,5,0,280,0,0,0,0,0,280,0]];
hc[272]=[[1,0,0,4,0,0,0,0,0,4,0,0,0,0,0,280,0]];
hc[273]=[[1,0,0,4,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[274]=[[1,4,0,4,0,4,0,0,0,280,0,0,0,0,0,280,0]];
hc[275]=[[1,4,0,4,0,0,0,4,0,280,0,0,0,0,0,280,0]];
hc[276]=[[1,0,0,264,0,0,0,0,0,264,0,0,0,0,0,280,0]];
hc[277]=[[1,0,0,264,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[278]=[[1,264,0,264,0,264,0,0,0,280,0,0,0,0,0,280,0]];
hc[279]=[[1,264,0,264,0,0,0,264,0,280,0,0,0,0,0,280,0]];
hc[280]=[[4,0,0,5,0,0,0,0,0,5,0]];
hc[281]=[[4,5,0,0,0,5,0,0,0,5,0]];
hc[282]=[[1,39,0,40,0,0,0,0,0,281,0]];
hc[283]=[[1,0,0,266,0,0,0,0,0,266,0,0,0,0,0,280,0]];
hc[284]=[[1,0,0,266,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[285]=[[1,266,0,266,0,266,0,0,0,280,0,0,0,0,0,280,0]];
hc[286]=[[1,266,0,266,0,0,0,266,0,280,0,0,0,0,0,280,0]];
hc[290]=[[1,5,0,5,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[291]=[[1,4,0,4,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[292]=[[1,265,0,265,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[293]=[[1,264,0,264,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[294]=[[1,266,0,266,0,0,0,0,0,280,0,0,0,0,0,280,0]];
hc[297]=[[1,296,0,296,0,296,0]];
hc[298]=[[1,334,0,334,0,334,0,334,0,0,0,334,0]];
hc[299]=[[1,334,0,0,0,334,0,334,0,334,0,334,0,334,0,334,0,334,0]];
hc[300]=[[1,334,0,334,0,334,0,334,0,0,0,334,0,334,0,0,0,334,0]];
hc[301]=[[1,334,0,0,0,334,0,334,0,0,0,334,0]];
hc[306]=[[1,265,0,265,0,265,0,265,0,0,0,265,0]];
hc[307]=[[1,265,0,0,0,265,0,265,0,265,0,265,0,265,0,265,0,265,0]];
hc[308]=[[1,265,0,265,0,265,0,265,0,0,0,265,0,265,0,0,0,265,0]];
hc[309]=[[1,265,0,0,0,265,0,265,0,0,0,265,0]];
hc[310]=[[1,264,0,264,0,264,0,264,0,0,0,264,0]];
hc[311]=[[1,264,0,0,0,264,0,264,0,264,0,264,0,264,0,264,0,264,0]];
hc[312]=[[1,264,0,264,0,264,0,264,0,0,0,264,0,264,0,0,0,264,0]];
hc[313]=[[1,264,0,0,0,264,0,264,0,0,0,264,0]];
hc[314]=[[1,266,0,266,0,266,0,266,0,0,0,266,0]];
hc[315]=[[1,266,0,0,0,266,0,266,0,266,0,266,0,266,0,266,0,266,0]];
hc[316]=[[1,266,0,266,0,266,0,266,0,0,0,266,0,266,0,0,0,266,0]];
hc[317]=[[1,266,0,0,0,266,0,266,0,0,0,266,0]];
hc[320]=[[1,319,0,51,0]];
hc[321]=[[1,280,0,280,0,280,0,280,0,35,0,280,0,280,0,280,0,280,0]];
hc[322]=[[1,266,0,266,0,266,0,266,0,260,0,266,0,266,0,266,0,266,0],[1,41,0,41,0,41,0,41,0,260,0,41,0,41,0,41,0,41,0]];
hc[323]=[[3,5,0,5,0,5,0,5,0,5,0,5,0,0,0,280,0]];
hc[324]=[[1,5,0,5,0,0,0,5,0,5,0,0,0,5,0,5,0,0,0]];
hc[325]=[[1,265,0,0,0,265,0,0,0,265,0],[1,325,1],[],[],[],[],[],[],[1,325,8],[],[1,325,10]];
hc[328]=[[1,265,0,0,0,265,0,265,0,265,0,265,0]];
hc[330]=[[3,265,0,265,0,0,0,265,0,265,0,0,0,265,0,265,0]];
for(var i=0;i<6;i++) hc[333][i]=[1,5,i,269,0,5,i,5,i,5,i,5,i];
hc[336]=[[1,337,0,51,0]];
hc[339]=[[3,338,0,338,0,338,0]];
hc[340]=[[1,339,0,339,0,0,0,339,0,334,0]];
hc[345]=[[1,0,0,265,0,0,0,265,0,331,0,265,0,0,0,265,0,0,0]];
hc[346]=[[1,0,0,0,0,280,0,0,0,280,0,287,0,280,0,0,0,287,0]];
hc[347]=[[1,0,0,266,0,0,0,266,0,331,0,266,0,0,0,266,0,0,0]];
hc[349]=[[1,349,0],[1,349,1],[1,349,2],[1,349,3]];
hc[350]=[[1,349,0,51,0],[1,349,1,51,0]];
hc[351][15]=[2,352,0];
hc[353]=[[1,338,0]];
hc[354]=[[1,325,1,325,1,325,1,353,0,344,0,353,0,296,0,296,0,296,0]];
hc[355]=[[1,35,0,35,0,35,0,5,0,5,0,5,0]];
hc[357]=[[8,296,0,351,3,296,0]];
hc[359]=[[1,0,0,265,0,0,0,265,0]];
hc[361]=[[4,86,0]];
hc[362]=[[1,360,0]];
hc[364]=[[1,363,0,51,0]];
hc[366]=[[1,365,0,51,0]];
hc[373]=[[1,373,0],[1,373,1],[1,373,1,331,0],[1,373,0,348,0],[1,373,0,372,0],[1,373,4,396,0],[1,373,5,331,0],[1,373,5,376,0],[1,373,7,331,0],[1,373,4,414,0],[1,373,9,331,0],[1,373,9,348,0],[1,373,4,378,0],[1,373,12,331,0],[1,373,4,353,0],[1,373,14,331,0],[1,373,14,348,0],[1,373,14,376,0],[1,373,17,331,0],[1,373,4,349,3],[1,373,19,331,0],[1,373,4,382,0],[1,373,4,348,0],[1,373,21,376,0],[1,373,23,331,0],[1,373,4,375,0],[1,373,25,331,0],[1,373,25,348,0],[1,373,4,370,0],[1,373,28,331,0],[1,373,28,348,0],[1,373,4,377,0],[1,373,31,331,0],[1,373,31,348,0],[1,373,4,376,0],[1,373,34,331,0]];
hc[374]=[[3,20,0,0,0,20,0,0,0,20,0]];
hc[376]=[[1,375,0,353,0,0,0,0,0,39,0]];
hc[377]=[[2,0,0,0,0,0,0,0,0,369,0]];
hc[378]=[[1,0,0,0,0,0,0,377,0,341,0]];
hc[382]=[[1,371,0,371,0,371,0,371,0,360,0,371,0,371,0,371,0,371,0]];
for(var i=0;i<=39;i++) hc[383][i]=[1,383,i];
hc[390]=[[1,336,0,0,0,336,0,0,0,336,0]];
hc[393]=[[1,392,0,51,0]];
hc[396]=[[1,371,0,371,0,371,0,371,0,391,0,371,0,371,0,371,0,371,0]];
hc[400]=[[1,86,0,353,0,0,0,0,0,344,0]];
hc[405]=[[1,87,0,51,0]];
hc[411]=[[1,0,0,411,0,0,0,0,51,0]];
hc[413]=[[1,0,0,412,0,0,0,391,0,393,0,39,0,0,0,281,0]];
hc[427]=[[1,5,1,5,1,0,0,5,1,5,1,0,0,5,1,5,1]];
hc[428]=[[1,5,2,5,2,0,0,5,2,5,2,0,0,5,2,5,2]];
hc[429]=[[1,5,3,5,3,0,0,5,3,5,3,0,0,5,3,5,3]];
hc[430]=[[1,5,4,5,4,0,0,5,4,5,4,0,0,5,4,5,4]];
hc[431]=[[1,5,5,5,5,0,0,5,5,5,5,0,0,5,5,5,5]];
for(var i=0;i<=35;i++) hc[438][i]=[1,373,i,289,0];
hc[459]=[[1,457,0,457,0,457,0,457,0,457,0,457,0,0,0,281,0]];
//非拓展合成方式结束


//合成方式结束
var gj=new Array();//gj存储所有的有损耗值的物品
gj=[145,256,257,258,259,261,267,268,269,270,271,272,273,274,275,276,277,278,279,283,284,285,286,290,291,292,293,294,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,359];

function findNullBlock()
{
    if(isFirstTime != "true")
    {
        print("检测到这是您第一次使用反合成，反合成将进行一些设置，请耐心等候...")
        var flag = false;
        var i = 1;
        while(true)
        {
            if(!Item.isValidItem(i))
            {
                flag = true;
                settings(i);
                ModPE.saveData("ift","true");
                ModPE.saveData("bid",i);
                bid = i;
                print("设置完成!");
                print("目前，反合成工具台的方块ID为:"+bid);
                break;
            }
            ++ i;
        }
        if(flag == false)
        {
            ModPE.saveData("ift","true");
            enable = false;
            print("没有发现可用的方块id，反合成将自动禁用");
        }
    }
    else
    {
        var id = parseInt(ModPE.readData("bid"));//获取之前存储过的id
        bid = id;
        settings(id);
    }
}

function readDB()
{
    var hs = ModPE.readData("hs");
    if(hs == "true")
    {
        print("检测到您有已存储的合成方式，将自动载入");
        var count = parseInt(ModPE.readData("cnt")); //读取存储了几种合成方式
        for(var i=1;i<=count;i++)
        {
            var sstr = ModPE.readData("fhc"+i);
            var db = sstr.split(" ");
            var iiid = parseInt(db[1]);
            var ddta = parseInt(db[2]);
            var ccnt = parseInt(db[3]);
            hc[iiid][ddta][0] = ccnt;
            for(var j=0;j<parseInt(db[0]);j++)
            {
                hc[iiid][ddta][j+1] = db[parseInt(4+j*2)];
                hc[iiid][ddta][j+2] = db[parseInt(5+j*2)];
            }
        }
    }
}

function settings(id)//参数id为反合成方块id
{
    Block.defineBlock(id,"反合成工具台",[ ["stonecutter",3], ["crafting_table",0],["crafting_table",1],["furnace",1], ["crafting_table",2],["stonecutter",0]],58,false,0);
    Item.addShapedRecipe(id,1,0,["mms","mhs","mss"],["m",5,0,"h",331,0,"s",4,0]);
    Block.setLightLevel(id,15);
    Block.setDestroyTime(id,1);
    hc[id]=[[1,5,0,5,0,4,0,5,0,331,0,4,0,5,0,4,0,4,0]];
    readDB();
}

findNullBlock();//添加‘反合成工具台’这个方块，并对它做出一些设置

function findObj(arr,o)//查找一个数组arr中是否有o这个对象
{
    var flag=false;
    for(var i=0;i<arr.length;i++)
    {
        if(arr[i]==o)
        {
            flag=true;
        }
    }
    return flag;
}

function ti(num)
{
    return parseInt(num);
}

function procCmd(cmd)//指令添加合成方式
{
    var data = cmd.split(" ");
    var hs = ModPE.readData("hs");
    if(hs == "true")
    {
        count = parseInt(ModPE.readData("cnt"));
    }
    else count = 0;
    if(enable == true)
    {
        if(data[0] == "fhcadd")
        {
            var fff = true;
            if(data.length % 2 == 1)
            {
                data[data.length] = 0;
            }
            if(ti(data[1]) >= 1 && isNaN(data[1]) != true)
            {
                if(ti(data[2]) >= 0 && isNaN(data[2]) != true)
                {
                    for(var i=3;i<data.length;i+=2)
                    {
                        if(! isNaN(data[i]))hc[ti(data[1])][ti(data[2])][i-2] = ti(data[i]); else {fff = false;break;}
                        if(! isNaN(data[i+1]))hc[ti(data[1])][ti(data[2])][i-1] = ti(data[i+1]); else {fff = false;break;}
                    }
                }
                else {clientMessage("物品data必须大于0,且必须为数字");fff = false;}
            }
            else {clientMessage("物品id必须大于1，且必须为数字");fff = false;}
            if(fff == true)
            {
                ModPE.saveData("hs", "true");
                var stri = "";
                for(var i=3;i<data.length;i++)
                {
                    stri = stri + "" +  data[i];
                }
                ModPE.saveData("fhc"+count);
                count ++;
            }
        }
    }
}

function useItem(x,y,z,id,b,s,i1,b1)//主激发函数（用物品点击以激活）
{
    if(enable == true)// 检测是否可以启用
    {
        if(Level.getGameMode()==0)//只在生存模式下工作
        {
            if(id!=255)
            {
                id=parseInt(id);
                b=parseInt(b);
                i1=parseInt(i1);
                b1=parseInt(b1);
                x=x+0.5;
                y=y+1;
                z=z+0.5;
                var count=Player.getCarriedItemCount();
                if(findObj(gj,id)==true)
                {
                    i1=0;
                }
                if(b==bid)
                {
                    preventDefault();
                    if(hc[id][i1][0]<=count)
                    {
                        Entity.setCarriedItem(getPlayerEnt(),id,(count-hc[id][i1][0]),i1);//移除玩家手中要反合成的物品
                        //Level.addParticle(ParticleType.redstone,x,y+1,z,0,0,0,7);
                        var icx=new Array();//存储x轴偏移量
                        var icy=new Array();//存储y轴偏移量
                        var icz=new Array();//存储z轴偏移量
                        icx=[x-0.5,x,x+0.5,x-0.5,x,x+0.5,x-0.5,x,x+0.5,x-0.5,x,x+0.5,x-0.5,x,x+0.5,x-0.5,x,x+0.5];
                        icy=[y+1.5,y+1.5,y+1.5,y+1,y+1,y+1,y+0.5,y+0.5,y+0.5];
                        icz=[z-0.5,z,z+0.5,z-0.5,z,z+0.5,z-0.5,z,z+0.5,z-0.5,z,z+0.5,z-0.5,z,z+0.5,z-0.5,z,z+0.5];
                        var px=Player.getX();// \
                        var py=Player.getY();// |--获取玩家坐标
                        var pz=Player.getZ();// /
                        if(Math.abs(px-x)>Math.abs(pz-z))//判断玩家站立的方位，使反合成后的那堆物品面冲着玩家
                        {
                            for(var i=0;i<=((hc[id][i1].length)-1)/2-1;i++)
                            {
                                //在特定的位置生成掉落特定的物品
                                var iid=parseInt(hc[id][i1][2*i+1]);
                                var ida=parseInt(hc[id][i1][2*i+2]);
                                if(iid!=0)
                                {
                                    //使生成的物品定在空中
                                    //此处引用了 时空裂痕X（激光器js的作者） 的算法
                                    var ent=Level.dropItem(x,icy[i],icz[i],0,iid,1,ida);
                                    Entity.setVelX(ent,1/0);
                                    Entity.setVelY(ent,1/0);
                                    Entity.setVelZ(ent,1/0);
                                }
                            }
                        }
                        else
                        {
                            for(var i=0;i<=((hc[id][i1].length)-1)/2-1;i++)
                            {
                                //作用同上
                                var iid=parseInt(hc[id][i1][2*i+1]);
                                var ida=parseInt(hc[id][i1][2*i+2]);
                                if(iid!=0)
                                {
                                    var ent=Level.dropItem(icx[i],icy[i],z,0,iid,1,ida);
                                    Entity.setVelX(ent,1/0);
                                    Entity.setVelY(ent,1/0);
                                    Entity.setVelZ(ent,1/0);
                                }
                            }
                        }
                    }
                    else
                        clientMessage("需要反合成的物品数量不够,至少需要"+hc[id][i1][0]+"个");
                }
            }
            //这是个彩蛋，当玩家用ID为255的方块点击反合成台的时候，掉落64个钻石块
            else if(id==255&&b==bid)
            {
                preventDefault();
                Entity.setCarriedItem(getPlayerEnt(),0,0,0);
                for(var i=1;i<=64;i++)
                {
                    Level.dropItem(x,y+30,z,0,57,1,0);
                }
            }
       }
    }
}
//--The End Of File--
